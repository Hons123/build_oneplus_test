name: Build_oneplus_sm8750
on:
  workflow_dispatch:
    inputs:
      REPO_MANIFEST:
        description: "请选择要编译的机型："
        required: true
        type: choice
        options:
          - 'oneplus_13'
          - 'oneplus_ace5_pro'
          - 'oneplus_13t'
          - 'oneplus_13s'
          - 'oneplus_pad_2_pro'
          - 'oneplus_pad_3'
        default: 'oneplus_13t'

jobs:
  build:
    name: Build_${{ github.event.inputs.REPO_MANIFEST }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_DIR: /home/runner/.ccache  
      CCACHE_MAXSIZE: 8G
    permissions:
      contents: write
      actions: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 📊 最大化构建空间
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: 📦 设置账户
        run: |
          git config --global user.name "AnkoleNeon"
          git config --global user.email "ankole@foxmail.com"

      - name: 📦 安装依赖
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl
          sudo apt install -y python3 git curl ccache
          libxml2-utils rsync unzip gcc-aarch64-linux-gnu jq      
          echo "✅ 依赖安装完成"
      
      - name: ⚙️ 设置对应机型配置文件
        id: set_manifest
        run: |
          case "${{ github.event.inputs.REPO_MANIFEST }}" in
            *)
              echo "REPO_MANIFEST=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              echo "DEVICES_NAME=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              ;;
          esac

      - name: ⚙️ 初始化缓存
        uses: actions/cache@v3
        with:
          path: /home/runner/.ccache
          key: ccache-${{ runner.os }}-${{ github.ref }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: 📥 安装repo工具
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      - name: 📥 初始化repo并同步内核源码
        run: |
         mkdir kernel_workspace && cd kernel_workspace
         repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/sm8750 -m ${{ env.REPO_MANIFEST }}.xml --depth=1
         repo --trace sync -c -j$(nproc --all) --no-tags
         rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
         rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
          
      - name: ⚙️ 配置SuKiSU Ultra
        run: |
            mkdir -p kernel_workspace/kernel_platform
            cd kernel_workspace/kernel_platform
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" -o setup.sh && bash setup.sh susfs-main
            cd KernelSU
            KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10700)
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
            export KSU_VERSION=$KSU_VERSION
            sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
            
      - name: 🔧 配置 SUSFS
        run: |
            cd kernel_workspace
            git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
            git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git

            cd kernel_platform
            cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
            cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
            cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

            cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux/
            cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib/
            cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto/
            cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
            
            cd ./common
            patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
            cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
            patch -p1 -F 3 < syscall_hooks.patch
            echo "完成"

      - name: 🔧 配置HMBird GKI补丁
        run: |
         cd kernel_workspace/kernel_platform/common/drivers
         cat << 'EOF' > hmbird_patch.c
         #include <linux/init.h>
         #include <linux/module.h>
         #include <linux/of.h>
         #include <linux/slab.h>
         #include <linux/string.h>

         static int __init hmbird_patch_init(void)
         {
             struct device_node *ver_np;
             const char *type;
             int ret;

             ver_np = of_find_node_by_path("/soc/oplus,hmbird/version_type");
             if (!ver_np) {
                  pr_info("hmbird_patch: version_type node not found\n");
                  return 0;
             }

             ret = of_property_read_string(ver_np, "type", &type);
             if (ret) {
                  pr_info("hmbird_patch: type property not found\n");
                  of_node_put(ver_np);
                  return 0;
             }

             if (strcmp(type, "HMBIRD_OGKI")) {
                  of_node_put(ver_np);
                  return 0;
             }

             struct property *prop = of_find_property(ver_np, "type", NULL);
             if (prop) {
                  struct property *new_prop = kmalloc(sizeof(*prop), GFP_KERNEL);
                  if (!new_prop) {
                       pr_info("hmbird_patch: kmalloc for new_prop failed\n");
                       of_node_put(ver_np);
                       return 0;
             }
             memcpy(new_prop, prop, sizeof(*prop));
             new_prop->value = kmalloc(strlen("HMBIRD_GKI") + 1, GFP_KERNEL);
             if (!new_prop->value) {
                  pr_info("hmbird_patch: kmalloc for new_prop->value failed\n");
                  kfree(new_prop);
                  of_node_put(ver_np);
                  return 0;
            }
            strcpy(new_prop->value, "HMBIRD_GKI");
            new_prop->length = strlen("HMBIRD_GKI") + 1;

            if (of_remove_property(ver_np, prop) != 0) {
                 pr_info("hmbird_patch: of_remove_property failed\n");
                 return 0;
            }
            if (of_add_property(ver_np, new_prop) !=0) {
                 pr_info("hmbird_patch: of_add_property failed\n");
                 return 0;
            }
            pr_info("hmbird_patch: success from HMBIRD_OGKI to HMBIRD_GKI\n");
         }
         else {
             pr_info("hmbird_patch: type property structure not found\n");
         }
         of_node_put(ver_np);
         return 0;
         }
         early_initcall(hmbird_patch_init);
         MODULE_LICENSE("GPL");
         MODULE_AUTHOR("reigadegr");
         MODULE_DESCRIPTION("Forcefully convert HMBIRD_OGKI to HMBIRD_GKI.");
         EOF
         if ! grep -q "hmbird_patch.o" Makefile; then
         echo "obj-y += hmbird_patch.o" >> Makefile
         fi
         cd ../../../
         git add -A
         git commit -m "Add HMBird GKI patch" || true
      
      - name: 🔧 配置隐藏应用补丁
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          echo "正在打隐藏应用补丁"
          patch -p1 -F 3 < 69_hide_stuff.patch
          echo "隐藏应用_patch完成"

      - name: 🔧 配置ZRAM
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/other/zram/zram_patch/6.6/lz4kd.patch ./
          echo "正在打lz4kd补丁"
          patch -p1 -F 3 < lz4kd.patch || true
          echo 'lz4kd_patch完成'

      - name: 🔧 设置编译配置
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE="${{ github.workspace }}/kernel_workspace/kernel_platform/common/arch/arm64/configs/gki_defconfig"
          echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
          echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
          # SUSFS
          echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"
          
          # ZRAM配置
          echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
          echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
          echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
          echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE"
          echo "CONFIG_ZRAM_WRITEBACK=y" >> "$CONFIG_FILE"

          # bbr配置
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BBR=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SCH_FQ=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BIC=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_CUBIC=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "$CONFIG_FILE"
          echo "CONFIG_DEFAULT_TCP_CONG=bbr" >> "$CONFIG_FILE"

          # 移除审查
          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "BUILD Kernel"

      - name: 🔧 设置内核名称
        env:
          REPO_MANIFEST: ${{ github.event.inputs.REPO_MANIFEST }}
          KEEP_ORIGINAL: ${{ github.event.inputs.keep_original_settings }}
          CUSTOM_SUFFIX: ${{ github.event.inputs.custom_kernel_suffix }}
        run: |
          cd kernel_workspace/kernel_platform

          case "${{ env.DEVICES_NAME }}" in
            oneplus_13 | oneplus_ace5_pro)
              DEFAULT_SUFFIX="-android15-8-g4dc61d72e02f-abogki415959920-4k"
              ;;
            oneplus_13t | oneplus_13s)
              DEFAULT_SUFFIX="-android15-8-g29d86c5fc9dd-abogki428889875-4k "
              ;;
            oneplus_pad_2_pro | oneplus_pad_3)
              DEFAULT_SUFFIX="-android15-8-g7b1f455c7143-ab13591283-4k"
              ;;
          esac
          
          echo "当前机型: ${{ env.DEVICES_NAME }}"
          echo "保持原设置: $KEEP_ORIGINAL"
          echo "自定义后缀: $CUSTOM_SUFFIX"
          echo "默认后缀: $DEFAULT_SUFFIX"
          
          if [ "$KEEP_ORIGINAL" = "false" ]; then
            if [ -n "$CUSTOM_SUFFIX" ]; then
              DEFAULT_SUFFIX="$CUSTOM_SUFFIX"
              echo "使用自定义内核名称: $DEFAULT_SUFFIX"
            else
              echo "使用机型默认内核名称: $DEFAULT_SUFFIX"
            fi
          else
            echo "保持原内核名称设置"
          fi
          ESCAPED_SUFFIX=$(printf '%s\n' "$DEFAULT_SUFFIX" | sed 's:[\/&]:\\&:g')
          sudo sed -i "s/-4k/$ESCAPED_SUFFIX/g" ./common/arch/arm64/configs/gki_defconfig
          sed -i 's/${scm_version}//' ./common/scripts/setlocalversion
      
      - name: ⚙️ 设置构建时间
        id: set_kernel_time
        run: |
          if [ "${{ github.event.inputs.keep_original_settings }}" = "false" ] && [ -n "${{ github.event.inputs.custom_kernel_time }}" ]; then
            echo "使用自定义构建时间: ${{ github.event.inputs.custom_kernel_time }}"
            echo "KERNEL_TIME=${{ github.event.inputs.custom_kernel_time }}" >> $GITHUB_ENV
          else
            case "${{ env.DEVICES_NAME }}" in
              oneplus_13 | oneplus_ace5_pro)
                echo 'KERNEL_TIME=Mon May 12 09:09:59 UTC 2025' >> $GITHUB_ENV
                ;;
              oneplus_13t | oneplus_13s)
                echo 'KERNEL_TIME=Tue Jul  1 19:48:18 UTC 2025' >> $GITHUB_ENV
                ;;
              oneplus_pad_2_pro | oneplus_pad_3)
                echo 'KERNEL_TIME=Tue Jun 3 03:22:33 UTC 2025' >> $GITHUB_ENV
                ;;
            esac
          fi
      
      - name: 🔧 写入风驰补丁
        run: |
         cd kernel_workspace/kernel_platform/
         git clone https://github.com/HanKuCha/sched_ext.git
         cp -r ./sched_ext/* ./common/kernel/sched
         rm -rf ./sched_ext/.git
         cd common/kernel/sched  

      - name: 🔨 构建内核
        run: |
          export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
          export PATH="/usr/lib/ccache:$PATH"
          export KBUILD_BUILD_TIMESTAMP="${{ env.KERNEL_TIME }}"
          sudo apt update && sudo apt install -y libelf-dev
          cd kernel_workspace/kernel_platform/common
          mkdir -p out
          make -j$(nproc) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" RUSTC="$RUSTC_PATH" PAHOLE="$PAHOLE_PATH" LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2 KCFLAGS_PERF+=-O3 gki_defconfig Image

      - name: 📦 制作无KPM AK3包
        run: |
          git clone https://github.com/Kernel-SU/AnyKernel3.git --depth=1 AnyKernel3_NoKPM
          if [ ! -d "./AnyKernel3_NoKPM" ]; then
            echo "::error ::Failed to clone AnyKernel3 repository"
            exit 1
          fi
          rm -rf ./AnyKernel3_NoKPM/.git
          rm -rf ./AnyKernel3_NoKPM/push.sh
          cp kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image ./AnyKernel3_NoKPM/Image
          cd ./AnyKernel3_NoKPM/
          BASE_NAME="AK3_${{ env.KSUVER }}_${{ env.DEVICES_NAME }}_SuKiSU"
          PACKAGE_NAME_NO_KPM="${BASE_NAME}_NoKPM.zip"
          zip -r "$PACKAGE_NAME_NO_KPM" *
          echo "PACKAGE_NAME_NO_KPM=$PACKAGE_NAME_NO_KPM" >> $GITHUB_ENV

      - name: 📦 应用KPM修补补丁
        run: |
         cd kernel_workspace/kernel_platform/common/out/arch/arm64/boot
         curl -LO https://github.com/SukiSU-Ultra/SukiSU_patch/raw/refs/heads/main/kpm/patch_linux
         chmod +x patch_linux
         ./patch_linux
         rm -f Image
         mv oImage Image

      - name: 📦 制作有KPM AK3包
        run: |
         git clone https://github.com/Kernel-SU/AnyKernel3.git --depth=1      
         if [ ! -d "./AnyKernel3" ]; then
           echo "::error ::Failed to clone AnyKernel3 repository"
           exit 1
         fi
         rm -rf ./AnyKernel3/.git
         rm -rf ./AnyKernel3/push.sh
         cp kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image ./AnyKernel3/Image
         cd ./AnyKernel3/
         BASE_NAME="AK3_${{ env.KSUVER }}_${{ env.DEVICES_NAME }}_SuKiSU"
         PACKAGE_NAME_KPM="${BASE_NAME}_KPM.zip"
         zip -r "$PACKAGE_NAME_KPM" *
         echo "PACKAGE_NAME_KPM=$PACKAGE_NAME_KPM" >> $GITHUB_ENV

      - name: 📦 获取 SukiSU Manager
        id: get_sukisu_manager
        run: |
          echo "This is the SukiSU variant"
          cd kernel_workspace
          git clone https://github.com/SukiSU-Ultra/SukiSU-Ultra.git
          cd SukiSU-Ultra
          KSU_GIT_VERSION=$(git rev-list --count HEAD)
          KSU_VERSION=$((10000 + KSU_GIT_VERSION + 700))
          echo "KSU_VERSION=$KSU_VERSION" >> $GITHUB_ENV
          
          REPO="SukiSU-Ultra/SukiSU-Ultra"
          FILENAME="build-manager.yml"
          
          # 获取最新成功构建的 ID
          BUILD_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/$REPO/actions/workflows/$FILENAME/runs?status=success&branch=main" | \
          jq -r '.workflow_runs[0].id')
          echo "BUILD_ID=$BUILD_ID"
          
          if [ -z "$BUILD_ID" ]; then
            echo "::error ::Failed to retrieve successful build ID for SukiSU Manager"
            echo "MANAGER_SUCCESS=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # 获取该构建的 Artifacts
          ARTIFACTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$REPO/actions/runs/$BUILD_ID/artifacts")
          echo "ARTIFACTS=$ARTIFACTS"
          
          # 获取 Manager 文件的下载链接
          DOWNLOAD_URL=$(echo "$ARTIFACTS" | jq -r '.artifacts[] | select(.name == "manager") | .archive_download_url')
          echo $DOWNLOAD_URL
          
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "::error ::Failed to retrieve download URL for SukiSU Manager"
            echo "MANAGER_SUCCESS=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # 下载 Manager 文件
          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o "SukiSU-manager($KSU_VERSION).zip" "$DOWNLOAD_URL"
          if [ $? -ne 0 ]; then
            echo "::error ::Failed to download SukiSU Manager"
            echo "MANAGER_SUCCESS=false" >> $GITHUB_ENV
            exit 0
          fi
          
          echo "Manager 文件已下载为：SukiSU-manager($KSU_VERSION).zip"
          unzip *.zip
          mv *.apk SukiSU_${KSU_VERSION}.apk
          echo "MANAGER_SUCCESS=true" >> $GITHUB_ENV

      - name: 📤 上传AK3包和SukiSU Manager
        if: steps.get_sukisu_manager.outputs.MANAGER_SUCCESS != 'false'
        uses: actions/upload-artifact@v4
        with:
          name: AK3-packages-and-manager
          path: |
            ./AnyKernel3_NoKPM/${{ env.PACKAGE_NAME_NO_KPM }}
            ./AnyKernel3/${{ env.PACKAGE_NAME_KPM }}
            ./kernel_workspace/SukiSU-Ultra/SukiSU_${{ env.KSUVER }}.apk

      - name: 📤 上传AK3包
        if: steps.get_sukisu_manager.outputs.MANAGER_SUCCESS == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: AK3-packages
          path: |
            ./AnyKernel3_NoKPM/${{ env.PACKAGE_NAME_NO_KPM }}
            ./AnyKernel3/${{ env.PACKAGE_NAME_KPM }}

      - name: 📤 创建发布
        uses: softprops/action-gh-release@v1
        with:
          name: Release AK3_${{ env.KSUVER }}_SuKiSU
          body: |
            - 参照AK3后缀选择是否包含KPM
            
            ${{ env.MANAGER_SUCCESS == 'true' && format('- SukiSU_{0}_Manager', env.KSUVER) || '' }}
            
            - 更多ZRAM[LZ4(推荐)、LZ4HC、LZ4K、LZ4KD、842、LZ4K_OPLUS(推荐)]
            
            - SUSFS
            
            - 风驰内核补丁
            
            - BBR
            
          tag_name: v${{ env.KSUVER }}
          files: |
            ./AnyKernel3_NoKPM/${{ env.PACKAGE_NAME_NO_KPM }}
            ./AnyKernel3/${{ env.PACKAGE_NAME_KPM }}
            ${{ env.MANAGER_SUCCESS == 'true' && format('./kernel_workspace/SukiSU-Ultra/SukiSU_{0}.apk', env.KSUVER) || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 构建后空间检查
        run: |
          echo "构建后磁盘空间："
          df -h

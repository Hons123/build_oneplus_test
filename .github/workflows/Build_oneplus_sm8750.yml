name: Build_oneplus_sm8750
on:
  workflow_dispatch:
    inputs:
      REPO_MANIFEST:
        description: "ËØ∑ÈÄâÊã©Ë¶ÅÁºñËØëÁöÑÊú∫ÂûãÔºö"
        required: true
        type: choice
        options:
          - 'oneplus_13'
          - 'oneplus_ace5_pro'
          - 'oneplus_13t'
          - 'oneplus_13s'
          - 'oneplus_pad_2_pro'
          - 'oneplus_pad_3'
        default: 'oneplus_13t'

      keep_original_settings:
        description: "‰øùÊåÅÂéüÂÜÖÊ†∏ÂêçÁß∞ÂèäÊûÑÂª∫Êó∂Èó¥"
        required: false
        default: true
        type: boolean

      custom_kernel_suffix:
        description: "‚úèÔ∏è Ëá™ÂÆö‰πâÂÜÖÊ†∏ÂêçÁß∞ - ‰ªÖÂú®ÂèñÊ∂àÂãæÈÄâ'‰øùÊåÅÂéüËÆæÁΩÆ'Êó∂ÊúâÊïà"
        required: false
        default: ''

      custom_kernel_time:
        description: "‚è∞ Ëá™ÂÆö‰πâÊûÑÂª∫Êó∂Èó¥ - ‰ªÖÂú®ÂèñÊ∂àÂãæÈÄâ'‰øùÊåÅÂéüËÆæÁΩÆ'Êó∂ÊúâÊïà"
        required: false
        default: ''

      HOOK:
        description: "Èí©Â≠êÈÄâÊã©"
        required: true
        default: manual
        type: choice
        options:
          - kprobe
          - manual
          - tracepoint

      ZRAM:
        description: "ÊòØÂê¶Ê∑ªÂä†Êõ¥Â§öZRAMÁÆóÊ≥ïÔºü"
        required: true
        default: true
        type: boolean

      MORE:
        description: "ÊòØÂê¶Ê∑ªÂä†Êõ¥Â§öÈÖçÁΩÆÔºü"
        required: false
        default: true
        type: boolean

jobs:
  build:
    name: Build_${{ github.event.inputs.REPO_MANIFEST }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: üìä Ê£ÄÊü•Á£ÅÁõòÁ©∫Èó¥
        run: |
          echo "ÊûÑÂª∫ÂâçÁ£ÅÁõòÁ©∫Èó¥Ôºö"
          df -h
      
      - name: ‚öôÔ∏è ËÆæÁΩÆÂØπÂ∫îÊú∫ÂûãÈÖçÁΩÆÊñá‰ª∂
        id: set_manifest
        run: |
          case "${{ github.event.inputs.REPO_MANIFEST }}" in
            *)
              echo "REPO_MANIFEST=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              echo "DEVICES_NAME=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              ;;
          esac

      - name: ‚öôÔ∏è ËÆæÁΩÆÊûÑÂª∫Êó∂Èó¥
        id: set_kernel_time
        run: |
          if [ "${{ github.event.inputs.keep_original_settings }}" = "false" ] && [ -n "${{ github.event.inputs.custom_kernel_time }}" ]; then
            echo "‰ΩøÁî®Ëá™ÂÆö‰πâÊûÑÂª∫Êó∂Èó¥: ${{ github.event.inputs.custom_kernel_time }}"
            echo "KERNEL_TIME=${{ github.event.inputs.custom_kernel_time }}" >> $GITHUB_ENV
          else
            case "${{ env.DEVICES_NAME }}" in
              oneplus_13 | oneplus_ace5_pro)
                echo 'KERNEL_TIME=Mon May 12 09:09:59 UTC 2025' >> $GITHUB_ENV
                ;;
              oneplus_13t | oneplus_13s)
                echo 'KERNEL_TIME=Tue Jun 10 12:12:23 UTC 2025' >> $GITHUB_ENV
                ;;
              oneplus_pad_2_pro | oneplus_pad_3)
                echo 'KERNEL_TIME=Tue Jun 3 03:22:33 UTC 2025' >> $GITHUB_ENV
                ;;
            esac
          fi

      - name: ‚öôÔ∏è ËÆæÁΩÆÂØπÂ∫îÊú∫ÂûãCcecheË∑ØÂæÑ
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_${{ env.REPO_MANIFEST }}" >> $GITHUB_ENV

      - name: üì¶ ËÆæÁΩÆË¥¶Êà∑
        run: |
          git config --global user.name "AnkoleNeon"
          git config --global user.email "ankole@foxmail.com"

      - name: üõ† ÈÖçÁΩÆAPTÁºìÂ≠ò
        run: |
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Dir::State::lists \"$APT_CACHE_DIR/lists\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Check-Valid-Until \"false\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Languages \"none\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"

      - name: üõ† ÁºìÂ≠òAPTÂåÖ
        uses: actions/cache@v4
        with:
          path: ${{ env.HOME }}/apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/Build_oneplus_sm8750.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: üì¶ ÂÆâË£Ö‰æùËµñ
        run: |
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR/lists/partial"
          sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
            python3 git curl ccache libelf-dev \
            build-essential flex bison libssl-dev \
            libncurses-dev liblz4-tool zlib1g-dev \
            libxml2-utils rsync unzip gcc-aarch64-linux-gnu jq
          
          echo "‚úÖ ‰æùËµñÂÆâË£ÖÂÆåÊàê"
          
      - name: üì• ËΩΩÂÖ• Êú∫ÂûãÔºö${{ env.DEVICES_NAME }}ÁöÑ ccache ÁºìÂ≠ò
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.ref }}-${{ env.REPO_MANIFEST }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ env.REPO_MANIFEST }}-
            ccache-${{ runner.os }}-

      - name: üì• ÂàùÂßãÂåñCcecheÔºà‰ªÖÈ¶ñÊ¨°Ôºâ
        run: |
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"

          INIT_FLAG="$CCACHE_DIR/.ccache_initialized"
          if command -v ccache >/dev/null 2>&1; then
            if [ ! -f "$INIT_FLAG" ]; then
              echo "ÂàùÂßãÂåñ ccache ($CCACHE_DIR)..."
              mkdir -p "$CCACHE_DIR"
              ccache -M "$CCACHE_MAXSIZE"
              touch "$INIT_FLAG"
            else
              echo "ccache Â∑≤ÂàùÂßãÂåñÔºåË∑≥Ëøá"
            fi
          else
            echo "Êú™ÂÆâË£Ö ccacheÔºåË∑≥Ëøá"
          fi

      - name: üì• ÂÆâË£ÖrepoÂ∑•ÂÖ∑
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      - name: üì• ÂàùÂßãÂåñrepoÂπ∂ÂêåÊ≠•ÂÜÖÊ†∏Ê∫êÁ†Å
        run: |
         mkdir kernel_workspace && cd kernel_workspace
         repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/sm8750 -m ${{ env.REPO_MANIFEST }}.xml --depth=1
         repo --trace sync -c -j$(nproc --all) --no-tags
         rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
         rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
          
      - name: ‚öôÔ∏è ÈÖçÁΩÆSuKiSU Ultra
        run: |
            mkdir -p kernel_workspace/kernel_platform
            cd kernel_workspace/kernel_platform
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/setup.sh" -o setup.sh && bash setup.sh susfs-main
            cd KernelSU
            KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10700)
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
            export KSU_VERSION=$KSU_VERSION
            sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
            
      - name: üîß ÈÖçÁΩÆ SUSFS
        run: |
            cd kernel_workspace
            git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
            git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git

            cd kernel_platform
            cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
            cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
            cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

            cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux/
            cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib/
            cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto/
            cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/

            cd ./common
            patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
            echo "ÂÆåÊàê"

      - name: üîß ÈÖçÁΩÆÈöêËóèÂ∫îÁî®Ë°•‰∏Å
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          echo "Ê≠£Âú®ÊâìÈöêËóèÂ∫îÁî®Ë°•‰∏Å"
          patch -p1 -F 3 < 69_hide_stuff.patch
          echo "ÈöêËóèÂ∫îÁî®_patchÂÆåÊàê"

      - name: üîß ÈÖçÁΩÆhookÈí©Â≠ê
        run: |
          cd kernel_workspace/kernel_platform/common
          if [ "${{ github.event.inputs.HOOK }}" = "kprobe" ]; then
          echo "Ë∞ÉÁî® kprobe Èí©Â≠ê"
          elif [ "${{ github.event.inputs.HOOK }}" = "manual" ]; then
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          echo "Ë∞ÉÁî® manual Èí©Â≠ê"
          patch -p1 -F 3 < syscall_hooks.patch
          elif [ "${{ github.event.inputs.HOOK }}" = "tracepoint" ]; then
          cp ../../SukiSU_patch/hooks/tracepoint_hooks.patch ./
          echo "Ë∞ÉÁî® tracepoint Èí©Â≠ê"
          patch -p1 -F 3 < tracepoint_hooks.patch
          fi
            echo "ÂÆåÊàê"

      - name: üîß ÈÖçÁΩÆZRAM
        if: ${{ github.event.inputs.ZRAM == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/other/zram/zram_patch/6.6/lz4kd.patch ./
          echo "Ê≠£Âú®Êâìlz4kdË°•‰∏Å"
          patch -p1 -F 3 < lz4kd.patch || true
          echo 'lz4kd_patchÂÆåÊàê'
          cp ../../SukiSU_patch/other/zram/zram_patch/6.6/lz4k_oplus.patch ./
          echo "Ê≠£Âú®Êâìlz4k_oplusË°•‰∏Å"
          patch -p1 -F 3 < lz4k_oplus.patch || true
          echo 'lz4k_oplus_patchÂÆåÊàê'

      - name: üîß ÂçáÁ∫ßLZ4
        run: |
          LZ4_VERSION="1.10.0"
          LZ4_DOWNLOAD_URL="https://github.com/lz4/lz4/archive/refs/tags/v${LZ4_VERSION}.tar.gz"
          cd kernel_workspace/kernel_platform/common
          mkdir -p lz4_temp && cd lz4_temp
          echo "‰∏ãËΩΩLZ4 ${LZ4_VERSION}Ê∫êÁ†Å..."
          curl -Ls "${LZ4_DOWNLOAD_URL}" -o lz4.tar.gz
          tar -zxf lz4.tar.gz --strip-components=1

          # Â§çÂà∂Êñá‰ª∂Âπ∂‰ΩøÁî®Áã¨Á´ãÂëΩÂêçÔºåÈÅøÂÖç‰∏éLZ4KÂÜ≤Á™Å
          echo "Â§çÂà∂LZ4Êñá‰ª∂Âà∞ÂÜÖÊ†∏ÁõÆÂΩï..."
          # Ê∫êÁ†ÅÊñá‰ª∂ÔºàÊ∑ªÂä†"lz4v2_"ÂâçÁºÄÔºâ
          cp lib/lz4.c ../lib/lz4v2_core.c
          cp lib/lz4.h ../lib/lz4v2_core.h
          cp lib/lz4hc.c ../lib/lz4v2_hc.c
          cp lib/lz4hc.h ../lib/lz4v2_hc.h
          # Â§¥Êñá‰ª∂ÔºàÊîæÂú®Áã¨Á´ãË∑ØÂæÑÔºâ
          mkdir -p ../include/linux/lz4v2
          cp lib/lz4.h ../include/linux/lz4v2/lz4.h
          cp lib/lz4hc.h ../include/linux/lz4v2/lz4hc.h

          # ÂÖ®Â±ÄÈáçÂëΩÂêçÂáΩÊï∞ÂíåÂÆèÔºàÂΩªÂ∫ïÈöîÁ¶ªÂëΩÂêçÁ©∫Èó¥Ôºâ
          echo "ÈáçÂëΩÂêçÁ¨¶Âè∑‰ª•ÈÅøÂÖçÂÜ≤Á™Å..."
          # Ê†∏ÂøÉÂéãÁº©ÂáΩÊï∞ÈáçÂëΩÂêç
          sed -i 's/LZ4_compress_default/lz4v2_compress_default/g' ../lib/lz4v2_core.c ../lib/lz4v2_core.h
          sed -i 's/LZ4_decompress_safe/lz4v2_decompress_safe/g' ../lib/lz4v2_core.c ../lib/lz4v2_core.h
          # HCÈ´òÂéãÁº©ÂáΩÊï∞ÈáçÂëΩÂêç
          sed -i 's/LZ4_compress_HC/lz4v2_compress_HC/g' ../lib/lz4v2_hc.c ../lib/lz4v2_hc.h
          # ÂÜÖÈÉ®ÂÆèÂíåËæÖÂä©ÂáΩÊï∞ÈáçÂëΩÂêç
          sed -i 's/LZ4_/LZ4V2_/g' ../lib/lz4v2_core.c ../lib/lz4v2_core.h ../lib/lz4v2_hc.c ../lib/lz4v2_hc.h
          
          # Ê∑ªÂä†ÂÜÖÊ†∏ÂÖºÂÆπÊÄßÈÄÇÈÖç
          echo "Ê∑ªÂä†ÂÜÖÊ†∏ÈÄÇÈÖç‰ª£Á†Å..."
          # ÂºïÂÖ•ÂÜÖÊ†∏ÂøÖË¶ÅÂ§¥Êñá‰ª∂
          sed -i '1i#include <linux/types.h>' ../lib/lz4v2_core.c
          sed -i '2i#include <linux/kernel.h>' ../lib/lz4v2_core.c
          sed -i '3i#include <linux/module.h>' ../lib/lz4v2_core.c
          # HCÊñá‰ª∂ÂêåÊ†∑Â§ÑÁêÜ
          sed -i '1i#include <linux/types.h>' ../lib/lz4v2_hc.c
          sed -i '2i#include <linux/kernel.h>' ../lib/lz4v2_hc.c
          sed -i '3i#include <linux/module.h>' ../lib/lz4v2_hc.c

          # Ê∑ªÂä†Ê®°ÂùóÂ£∞ÊòéÔºàÁ¨¶ÂêàÂÜÖÊ†∏ËßÑËåÉÔºâ
          echo "Ê∑ªÂä†Ê®°ÂùóÂÖÉÊï∞ÊçÆ..."
          cat >> ../lib/lz4v2_core.c << 'EOF'
          MODULE_LICENSE("GPL");
          MODULE_DESCRIPTION("LZ4 1.10.0 Compression (v2)");
          MODULE_AUTHOR("LZ4 Project");
          EXPORT_SYMBOL(lz4v2_compress_default);
          EXPORT_SYMBOL(lz4v2_decompress_safe);
          EOF

          cat >> ../lib/lz4v2_hc.c << 'EOF'
          MODULE_LICENSE("GPL");
          MODULE_DESCRIPTION("LZ4HC 1.10.0 Compression (v2)");
          MODULE_AUTHOR("LZ4 Project");
          EXPORT_SYMBOL(lz4v2_compress_HC);
          EOF

          # Êõ¥Êñ∞MakefileÁ°Æ‰øùÁºñËØëÔºàÁã¨Á´ã‰∫éLZ4KÔºâ
          echo "Êõ¥Êñ∞MakefileÈÖçÁΩÆ..."
          if ! grep -q "lz4v2_core.o" ../lib/Makefile; then
            echo "obj-\$(CONFIG_LZ4V2_COMPRESS) += lz4v2_core.o" >> ../lib/Makefile
            echo "obj-\$(CONFIG_LZ4V2_COMPRESS) += lz4v2_hc.o" >> ../lib/Makefile
          fi

          # Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂
          cd .. && rm -rf lz4_temp
          echo "LZ4 ${LZ4_VERSION}ÈõÜÊàêÂÆåÊàêÔºà‰∏éLZ4KÂÖºÂÆπÔºâ"

      - name: üîß ÁºìÂ≠òHMBirdË°•‰∏Å
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/hmbird_patch.c
          key: hmbird-patch-v1
          restore-keys: |
            hmbird-patch-v1
            
      
      - name: üîß ÂÜôÂÖ•HMBirdË°•‰∏Å
        run: |
          PATCH_FILE="${{ runner.temp }}/hmbird_patch.c"
          if [ ! -f "$PATCH_FILE" ]; then
            if [ -f "${GITHUB_WORKSPACE}/hmbird_patch.c" ]; then
              echo "ÂÜôÂÖ•HMBirdË°•‰∏Å..."
              cp "${GITHUB_WORKSPACE}/hmbird_patch.c" "$PATCH_FILE"
            else
              echo "::error ::hmbird_patch.c not found in ${GITHUB_WORKSPACE}"
              exit 1
            fi
          fi
          
          cd kernel_workspace/kernel_platform/common/drivers
          cp "$PATCH_FILE" hmbird_patch.c
          
          if ! grep -q "hmbird_patch.o" Makefile; then
            echo "obj-y += hmbird_patch.o" >> Makefile
          fi
          echo "HMBirdË°•‰∏ÅÂ∫îÁî®ÂÆåÊàê"

      - name: üîß ËÆæÁΩÆÁºñËØëÈÖçÁΩÆ
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE="${{ github.workspace }}/kernel_workspace/kernel_platform/common/arch/arm64/configs/gki_defconfig"
          echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
          echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
          # SUSFS
          echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"
          
          # ZRAMÈÖçÁΩÆ
          if [ "${{ github.event.inputs.ZRAM }}" = "true" ]; then
            echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4K_OPLUS=y" >> "$CONFIG_FILE"
            echo "CONFIG_ZRAM_WRITEBACK=y" >> "$CONFIG_FILE"
          fi
          
          echo "CONFIG_LZ4V2_COMPRESS=y" >> "$CONFIG_FILE"
          echo "CONFIG_LZ4V2_HC=y" >> "$CONFIG_FILE"
          echo "CONFIG_LZ4V2_DEBUG=n" >> "$CONFIG_FILE"
          if [ "${{ github.event.inputs.ZRAM }}" = "true" ]; then
            echo "CONFIG_ZRAM_LZ4V2=y" >> "$CONFIG_FILE"
          fi
          
          # hookÈÖçÁΩÆ
          if [ "${{ github.event.inputs.HOOK }}" = "kprobe" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$CONFIG_FILE"
            echo "CONFIG_KPROBES=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_KPROBES_HOOK=y" >> "$CONFIG_FILE"
          elif [ "${{ github.event.inputs.HOOK }}" = "manual" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
          elif [ "${{ github.event.inputs.HOOK }}" = "tracepoint" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_TRACEPOINT_HOOK=y" >> "$CONFIG_FILE" 
          fi
          
          #Êõ¥Â§öÈÖçÁΩÆËøΩÂä†
          # bbrÈÖçÁΩÆ
          if [ "${{ github.event.inputs.MORE }}" = "true" ]; then
            echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$CONFIG_FILE"
            echo "CONFIG_TCP_CONG_BBR=y" >> "$CONFIG_FILE"
            echo "CONFIG_NET_SCH_FQ=y" >> "$CONFIG_FILE"
            echo "CONFIG_TCP_CONG_BIC=n" >> "$CONFIG_FILE"
            echo "CONFIG_TCP_CONG_CUBIC=n" >> "$CONFIG_FILE"
            echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$CONFIG_FILE"
            echo "CONFIG_TCP_CONG_HTCP=n" >> "$CONFIG_FILE"
            echo "CONFIG_DEFAULT_TCP_CONG=bbr" >> "$CONFIG_FILE"
          # ECNÈÖçÁΩÆ
            echo "CONFIG_IP_ECN=y" >> "$CONFIG_FILE"
            echo "CONFIG_TCP_ECN=y" >> "$CONFIG_FILE"
            echo "CONFIG_IPV6_ECN=y" >> "$CONFIG_FILE"
            echo "CONFIG_IP_NF_TARGET_ECN=y" >> "$CONFIG_FILE"
          # TMPFSÈÖçÁΩÆ
            echo "CONFIG_TMPFS_XATTR=y" >> "$CONFIG_FILE"
            echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$CONFIG_FILE"
          fi
          
          # ÁßªÈô§ÂÆ°Êü•
          sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "BUILD Kernel"

      - name: üîß ËÆæÁΩÆÂÜÖÊ†∏ÂêçÁß∞
        env:
          REPO_MANIFEST: ${{ github.event.inputs.REPO_MANIFEST }}
          KEEP_ORIGINAL: ${{ github.event.inputs.keep_original_settings }}
          CUSTOM_SUFFIX: ${{ github.event.inputs.custom_kernel_suffix }}
        run: |
          cd kernel_workspace/kernel_platform

          case "${{ env.DEVICES_NAME }}" in
            oneplus_13 | oneplus_ace5_pro)
              DEFAULT_SUFFIX="-android15-8-g4dc61d72e02f-abogki415959920-4k"
              ;;
            oneplus_13t | oneplus_13s)
              DEFAULT_SUFFIX="-androd15-8-g29d86c5fc9dd-abogki428889875-4k "
              ;;
            oneplus_pad_2_pro | oneplus_pad_3)
              DEFAULT_SUFFIX="-android15-8-g7b1f455c7143-ab13591283-4k"
              ;;
          esac
          
          echo "ÂΩìÂâçÊú∫Âûã: ${{ env.DEVICES_NAME }}"
          echo "‰øùÊåÅÂéüËÆæÁΩÆ: $KEEP_ORIGINAL"
          echo "Ëá™ÂÆö‰πâÂêéÁºÄ: $CUSTOM_SUFFIX"
          echo "ÈªòËÆ§ÂêéÁºÄ: $DEFAULT_SUFFIX"
          
          if [ "$KEEP_ORIGINAL" = "false" ]; then
            if [ -n "$CUSTOM_SUFFIX" ]; then
              DEFAULT_SUFFIX="$CUSTOM_SUFFIX"
              echo "‰ΩøÁî®Ëá™ÂÆö‰πâÂÜÖÊ†∏ÂêçÁß∞: $DEFAULT_SUFFIX"
            else
              echo "‰ΩøÁî®Êú∫ÂûãÈªòËÆ§ÂÜÖÊ†∏ÂêçÁß∞: $DEFAULT_SUFFIX"
            fi
          else
            echo "‰øùÊåÅÂéüÂÜÖÊ†∏ÂêçÁß∞ËÆæÁΩÆ"
          fi
          ESCAPED_SUFFIX=$(printf '%s\n' "$DEFAULT_SUFFIX" | sed 's:[\/&]:\\&:g')
          sudo sed -i "s/-4k/$ESCAPED_SUFFIX/g" ./common/arch/arm64/configs/gki_defconfig
          sed -i 's/${scm_version}//' ./common/scripts/setlocalversion
          
      - name: üîß ÂÜôÂÖ•È£éÈ©∞Ë°•‰∏Å
        run: |
         cd kernel_workspace/kernel_platform/
         git clone https://github.com/HanKuCha/sched_ext.git
         cp -r ./sched_ext/* ./common/kernel/sched
         rm -rf ./sched_ext/.git
         cd common/kernel/sched  

      - name: üî® ÊûÑÂª∫ÂÜÖÊ†∏
        run: |
         # Set up ccache path
         export PATH="/usr/lib/ccache:$PATH"

         # Define toolchain paths
         CLANG_PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin"
         RUSTC_PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/rust/linux-x86/1.73.0b/bin/rustc"
         PAHOLE_PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/kernel-build-tools/linux-x86/bin/pahole"

         # Check toolchain availability
         if [ ! -d "$CLANG_PATH" ]; then
            echo "::error ::Clang toolchain not found at $CLANG_PATH"
            exit 1
         fi
         if [ ! -f "$RUSTC_PATH" ]; then
            echo "::error ::Rust compiler not found at $RUSTC_PATH"
            exit 1
         fi
         if [ ! -f "$PAHOLE_PATH" ]; then
            echo "::error ::Pahole not found at $PAHOLE_PATH"
            exit 1
         fi

         # Add Clang to PATH
         export PATH="$CLANG_PATH:$PATH"

         # Configure ccache for optimal caching
         export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
         export CCACHE_NOHASHDIR="true"
         export CCACHE_HARDLINK="true"
         export CCACHE_DIR="${{ env.CCACHE_DIR }}"
         export CCACHE_MAXSIZE="8G"

         # Set kernel build timestamp
         export KBUILD_BUILD_TIMESTAMP="${{ env.KERNEL_TIME }}"

         # Install dependencies
         sudo apt update
         sudo apt install -y libelf-dev

         # Navigate to kernel source directory
         cd kernel_workspace/kernel_platform/common

         # Create output directory
         mkdir -p out

         # Configure kernel with GKI defconfig
         make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" RUSTC="$RUSTC_PATH" PAHOLE="$PAHOLE_PATH" LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2 KCFLAGS_PERF+=-O3 gki_defconfig

         # Verify .config generation
         if [ ! -f out/.config ]; then
            echo "::error ::Failed to generate .config in out/ directory"
            exit 1
         fi
         # Build kernel Image
         make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" RUSTC="$RUSTC_PATH" PAHOLE="$PAHOLE_PATH" LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2 KCFLAGS_PERF+=-O3 Image

      - name: üì¶ Âà∂‰ΩúÊó†KPM AK3ÂåÖ
        run: |
          git clone https://github.com/Kernel-SU/AnyKernel3.git --depth=1 AnyKernel3_NoKPM
          if [ ! -d "./AnyKernel3_NoKPM" ]; then
            echo "::error ::Failed to clone AnyKernel3 repository"
            exit 1
          fi
          rm -rf ./AnyKernel3_NoKPM/.git
          rm -rf ./AnyKernel3_NoKPM/push.sh
          cp kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image ./AnyKernel3_NoKPM/Image
          cd ./AnyKernel3_NoKPM/
          BASE_NAME="AK3_${{ env.KSUVER }}_${{ env.DEVICES_NAME }}_SuKiSU"
          PACKAGE_NAME_NO_KPM="${BASE_NAME}_NoKPM.zip"
          zip -r "$PACKAGE_NAME_NO_KPM" *
          echo "PACKAGE_NAME_NO_KPM=$PACKAGE_NAME_NO_KPM" >> $GITHUB_ENV

      - name: üì¶ Â∫îÁî®KPM‰øÆË°•Ë°•‰∏Å
        run: |
         cd kernel_workspace/kernel_platform/common/out/arch/arm64/boot
         curl -LO https://github.com/SukiSU-Ultra/SukiSU_patch/raw/refs/heads/main/kpm/patch_linux
         chmod +x patch_linux
         ./patch_linux
         rm -f Image
         mv oImage Image

      - name: üì¶ Âà∂‰ΩúÊúâKPM AK3ÂåÖ
        run: |
         git clone https://github.com/Kernel-SU/AnyKernel3.git --depth=1      
         if [ ! -d "./AnyKernel3" ]; then
           echo "::error ::Failed to clone AnyKernel3 repository"
           exit 1
         fi
         rm -rf ./AnyKernel3/.git
         rm -rf ./AnyKernel3/push.sh
         cp kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image ./AnyKernel3/Image
         cd ./AnyKernel3/
         BASE_NAME="AK3_${{ env.KSUVER }}_${{ env.DEVICES_NAME }}_SuKiSU"
         PACKAGE_NAME_KPM="${BASE_NAME}_KPM.zip"
         zip -r "$PACKAGE_NAME_KPM" *
         echo "PACKAGE_NAME_KPM=$PACKAGE_NAME_KPM" >> $GITHUB_ENV

      - name: üì¶ Ëé∑Âèñ SukiSU Manager
        id: get_sukisu_manager
        run: |
          echo "This is the SukiSU variant"
          cd kernel_workspace
          git clone https://github.com/SukiSU-Ultra/SukiSU-Ultra.git
          cd SukiSU-Ultra
          KSU_GIT_VERSION=$(git rev-list --count HEAD)
          KSU_VERSION=$((10000 + KSU_GIT_VERSION + 700))
          echo "KSU_VERSION=$KSU_VERSION" >> $GITHUB_ENV
          
          REPO="SukiSU-Ultra/SukiSU-Ultra"
          FILENAME="build-manager.yml"
          
          # Ëé∑ÂèñÊúÄÊñ∞ÊàêÂäüÊûÑÂª∫ÁöÑ ID
          BUILD_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/$REPO/actions/workflows/$FILENAME/runs?status=success&branch=main" | \
          jq -r '.workflow_runs[0].id')
          echo "BUILD_ID=$BUILD_ID"
          
          if [ -z "$BUILD_ID" ]; then
            echo "::error ::Failed to retrieve successful build ID for SukiSU Manager"
            echo "MANAGER_SUCCESS=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # Ëé∑ÂèñËØ•ÊûÑÂª∫ÁöÑ Artifacts
          ARTIFACTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$REPO/actions/runs/$BUILD_ID/artifacts")
          echo "ARTIFACTS=$ARTIFACTS"
          
          # Ëé∑Âèñ Manager Êñá‰ª∂ÁöÑ‰∏ãËΩΩÈìæÊé•
          DOWNLOAD_URL=$(echo "$ARTIFACTS" | jq -r '.artifacts[] | select(.name == "manager") | .archive_download_url')
          echo $DOWNLOAD_URL
          
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "::error ::Failed to retrieve download URL for SukiSU Manager"
            echo "MANAGER_SUCCESS=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # ‰∏ãËΩΩ Manager Êñá‰ª∂
          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o "SukiSU-manager($KSU_VERSION).zip" "$DOWNLOAD_URL"
          if [ $? -ne 0 ]; then
            echo "::error ::Failed to download SukiSU Manager"
            echo "MANAGER_SUCCESS=false" >> $GITHUB_ENV
            exit 0
          fi
          
          echo "Manager Êñá‰ª∂Â∑≤‰∏ãËΩΩ‰∏∫ÔºöSukiSU-manager($KSU_VERSION).zip"
          unzip *.zip
          mv *.apk SukiSU_${KSU_VERSION}.apk
          echo "MANAGER_SUCCESS=true" >> $GITHUB_ENV

      - name: üì§ ‰∏ä‰º†AK3ÂåÖÂíåSukiSU Manager
        if: steps.get_sukisu_manager.outputs.MANAGER_SUCCESS != 'false'
        uses: actions/upload-artifact@v4
        with:
          name: AK3-packages-and-manager
          path: |
            ./AnyKernel3_NoKPM/${{ env.PACKAGE_NAME_NO_KPM }}
            ./AnyKernel3/${{ env.PACKAGE_NAME_KPM }}
            ./kernel_workspace/SukiSU-Ultra/SukiSU_${{ env.KSUVER }}.apk

      - name: üì§ ‰∏ä‰º†AK3ÂåÖ
        if: steps.get_sukisu_manager.outputs.MANAGER_SUCCESS == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: AK3-packages
          path: |
            ./AnyKernel3_NoKPM/${{ env.PACKAGE_NAME_NO_KPM }}
            ./AnyKernel3/${{ env.PACKAGE_NAME_KPM }}

      - name: üì§ ÂàõÂª∫ÂèëÂ∏É
        uses: softprops/action-gh-release@v1
        with:
          name: Release AK3_${{ env.KSUVER }}_SuKiSU
          body: |
            - ÂèÇÁÖßAK3ÂêéÁºÄÈÄâÊã©ÊòØÂê¶ÂåÖÂê´KPM
            
            ${{ env.MANAGER_SUCCESS == 'true' && format('- SukiSU_{0}_Manager', env.KSUVER) || '' }}
            
            - Êõ¥Â§öZRAM[LZ4(Êé®Ëçê)„ÄÅLZ4HC„ÄÅLZ4K„ÄÅLZ4KD„ÄÅ842„ÄÅLZ4K_OPLUS(Êé®Ëçê)]
            
            - SUSFS
            
            - È£éÈ©∞ÂÜÖÊ†∏Ë°•‰∏Å
            
            - Êõ¥Â§öËøΩÂä†ÈÖçÁΩÆÔºàBBR„ÄÅENC„ÄÅTMPFSÔºâ
            
          tag_name: v${{ env.KSUVER }}
          files: |
            ./AnyKernel3_NoKPM/${{ env.PACKAGE_NAME_NO_KPM }}
            ./AnyKernel3/${{ env.PACKAGE_NAME_KPM }}
            ${{ env.MANAGER_SUCCESS == 'true' && format('./kernel_workspace/SukiSU-Ultra/SukiSU_{0}.apk', env.KSUVER) || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìä ÊûÑÂª∫ÂêéÁ©∫Èó¥Ê£ÄÊü•
        run: |
          echo "ÊûÑÂª∫ÂêéÁ£ÅÁõòÁ©∫Èó¥Ôºö"
          df -h
